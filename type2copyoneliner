Start-Sleep -Seconds 5; Add-Type -AssemblyName 'System.Windows.Forms'; '<text_to_copy_here>' | ForEach-Object { [System.Windows.Forms.SendKeys]::SendWait($_.ToString()); Start-Sleep -Milliseconds 100 }


Start-Sleep -Seconds 5; Add-Type -AssemblyName 'System.Windows.Forms' -ErrorAction Stop; 'This is a test' | ForEach-Object { [System.Windows.Forms.SendKeys]::SendWait($_.ToString()); Start-Sleep -Milliseconds 100 }


Start-Sleep -Seconds 5; $text = 'This is a test'; $text.ToCharArray() | ForEach-Object { Write-Host -NoNewline $_; Start-Sleep -Milliseconds 100 }


## Using VBS
powershell -ExecutionPolicy Bypass -Command "Start-Sleep -Seconds 5; $text = 'This is a test'; $vbScript = \"$wshell = CreateObject('WScript.Shell'); WScript.Sleep 1000; $wshell.SendKeys('$text')\"; $vbScript | Set-Content -Path \"$env:TEMP\temp.vbs\"; cscript //nologo \"$env:TEMP\temp.vbs\"; Remove-Item \"$env:TEMP\temp.vbs\""



##script run with script.ps1 "text to test"

param (
    [string]$text
)

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Create a VBScript that sends the keystrokes
$vbScriptPath = "$env:TEMP\sendkeys.vbs"
$vbScriptContent = @"
Set WshShell = CreateObject("WScript.Shell")
WScript.Sleep 1000
WshShell.SendKeys "$text"
"@

# Write the VBScript to a file
$vbScriptContent | Set-Content -Path $vbScriptPath

# Run the VBScript
cscript //nologo $vbScriptPath

# Clean up the VBScript
Remove-Item $vbScriptPath







####### using Add-Type

param (
    [string]$text
)

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Load the necessary assembly if it's not already loaded
if (-not [System.Windows.Forms.SendKeys]) {
    Add-Type -AssemblyName System.Windows.Forms
}

# Send the keystrokes
foreach ($char in $text.ToCharArray()) {
    [System.Windows.Forms.SendKeys]::SendWait($char)
    Start-Sleep -Milliseconds 100 # Optional delay for typing speed
}



#######################################
2nd attempt 
#######################################
# Ensure the script is run with the right parameters
if ($args.Count -eq 0) {
    Write-Host "Usage: .\sendkeys.ps1 'text to type'"
    exit
}

# Retrieve the text to send
$text = $args[0]

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Load the necessary assembly for SendKeys
Add-Type -AssemblyName System.Windows.Forms

# Send the keystrokes
foreach ($char in $text.ToCharArray()) {
    [System.Windows.Forms.SendKeys]::SendWait($char)
    Start-Sleep -Milliseconds 100 # Optional delay for typing speed
}

##################################################################################

param (
    [string]$text
)

# Check if text is provided
if (-not $text) {
    Write-Host "Usage: .\sendkeys.ps1 'text to type'"
    exit
}

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Load the necessary assembly for SendKeys
[Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") | Out-Null

# Check if the type is available
if (-not [System.Windows.Forms.SendKeys]) {
    Write-Host "Unable to load System.Windows.Forms.SendKeys. Make sure the assembly is available."
    exit
}

# Send the keystrokes
foreach ($char in $text.ToCharArray()) {
    [System.Windows.Forms.SendKeys]::SendWait($char)
    Start-Sleep -Milliseconds 100 # Optional delay for typing speed
}

########################################################
# Define the necessary User32 functions
$signature = @"
    [DllImport("user32.dll")]
    public static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, UIntPtr dwExtraInfo);
"@

# Load the User32 library and define the methods
Add-Type -MemberDefinition $signature -Name User32 -Namespace WindowsAPI

# Define key constants
$KEYEVENTF_KEYUP = 0x0002
$VK_SHIFT = 0x10
$VK_A = 0x41
$VK_B = 0x42
$VK_C = 0x43

function Send-Key {
    param (
        [byte]$key,
        [switch]$shift
    )

    if ($shift) {
        [WindowsAPI.User32]::keybd_event($VK_SHIFT, 0, 0, [UIntPtr]::Zero)
    }

    [WindowsAPI.User32]::keybd_event($key, 0, 0, [UIntPtr]::Zero)
    Start-Sleep -Milliseconds 50 # Delay between key presses
    [WindowsAPI.User32]::keybd_event($key, 0, $KEYEVENTF_KEYUP, [UIntPtr]::Zero)

    if ($shift) {
        [WindowsAPI.User32]::keybd_event($VK_SHIFT, 0, $KEYEVENTF_KEYUP, [UIntPtr]::Zero)
    }
}

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Check if text is provided
if ($args.Count -eq 0) {
    Write-Host "Usage: .\sendkeys.ps1 'text to type'"
    exit
}

# Send the keystrokes for each character in the provided text
foreach ($char in $args[0].ToCharArray()) {
    switch ($char) {
        'a' { Send-Key -key $VK_A }
        'b' { Send-Key -key $VK_B }
        'c' { Send-Key -key $VK_C }
        # Add cases for additional characters as needed
        default {
            Write-Host "Character '$char' not implemented."
        }
    }
}


################################################################
7th version
##################################################################

# Check if arguments were passed
if ($args.Count -eq 0) {
    Write-Host "Usage: .\sendkeys.ps1 'text to type'"
    exit
}

# Wait for 5 seconds
Start-Sleep -Seconds 5

# Create a WScript.Shell COM object
$shell = New-Object -ComObject WScript.Shell

# Send the text as keystrokes
$shell.SendKeys($args[0])

